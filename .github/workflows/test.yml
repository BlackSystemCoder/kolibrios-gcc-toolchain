name: Test packages

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '.vscode/**'
      - '.devcontainer/**'
      - '.gitignore'
      - 'CONTRIBUTING.md'
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:

  #Test linux install script
  linux-install:
    name: linux(sh) script install test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run script
        run: echo '/home/autobuild/tools' | ${{ github.workspace }}/./install.sh

      - name: Add toolchain to path
        run: echo "/home/autobuild/tools/win32/bin" >> $GITHUB_PATH

      - name: Test run
        run: |
          kos32-gcc -v
          kos32-g++ -v

  #Test Batch install script
  batch-install:
    name: Batch script install test
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install depends
        run: |
         choco install wget
         choco install 7zip

      - name: Run script
        run: ${{ github.workspace }}\install.bat

  #Test PowerShell install script
  PowerShell-install:
    name: PowerShell install script test
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install modules
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name 7Zip4PowerShell

      - name: Run script
        run: ${{ github.workspace }}\install.ps1

      - name: Test
        run: |
          kos32-gcc -v
          kos32-g++ -v

  #Test Windows Installer
  build-Installer:
    name: Build windows installer test
    runs-on: windows-latest
    needs: PowerShell-install
    steps:
      - uses: actions/checkout@v4

      - name: Build
        run: |
          cmake -B ${{ github.workspace }}/build
          cmake --build ${{ github.workspace }}/build --target Installer

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          # Upload entire repository
          path: './build/installer.exe'

  # Test online deb package build
  deb-online-package-build:
    name: Debian online package build test
    runs-on: ubuntu-latest
    needs: linux-install
    steps:
      - uses: actions/checkout@v4
              
      - name: Build
        run: |
          cmake -B ${{ github.workspace }}/build
          cmake --build ${{ github.workspace }}/build --target debOnline

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: deb-online-package
          # Upload entire repository
          path: './build/package.deb'

  # Test deb package install/remove
  deb-online-package-test:
    name: Debian online package install/remove test
    runs-on: ubuntu-latest
    needs: deb-online-package-build
    steps:
      - uses: actions/checkout@v4
              
      - name: Build
        run: |
          cmake -B ${{ github.workspace }}/build
          cmake --build ${{ github.workspace }}/build --target debOnline

      - name: Install package
        run: echo '/kolibrios-toolchain' | sudo apt install ${{ github.workspace }}/build/package.deb -y
        
      - name: Add toolchain to path
        run: echo "/kolibrios-toolchain/win32/bin" >> $GITHUB_PATH
        
      - name: Test run
        run: |
          kos32-g++ -v
          kos32-gcc -v
          /home/autobuild/tools/win32/bin/kos32-gcc -v
          /home/autobuild/tools/win32/bin/kos32-g++ -v
          /kolibrios-toolchain/win32/bin/kos32-gcc -v
          /kolibrios-toolchain/win32/bin/kos32-g++ -v

      - name: Remove package
        run: sudo apt remove kos32-gcc

  # Test offline deb package build
  deb-offline-package-build:
    name: Debian offline package build test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
              
      - name: Build
        run: |
          cmake -B ${{ github.workspace }}/build
          cmake --build ${{ github.workspace }}/build --target debOffline

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: deb-offline-package
          # Upload entire repository
          path: './build/package.deb'

  # Test deb package install/remove
  deb-offline-package-test:
    name: Debian offline package install/remove test
    runs-on: ubuntu-latest
    needs: deb-offline-package-build
    steps:
      - uses: actions/checkout@v4
              
      - name: Build
        run: |
          cmake -B ${{ github.workspace }}/build
          cmake --build ${{ github.workspace }}/build --target debOffline

      - name: Install package
        run: echo '/kolibrios-toolchain' | sudo apt install ${{ github.workspace }}/build/package.deb -y
        
      - name: Add toolchain to path
        run: echo "/kolibrios-toolchain/win32/bin" >> $GITHUB_PATH
        
      - name: Test run
        run: |
          kos32-g++ -v
          kos32-gcc -v
          /home/autobuild/tools/win32/bin/kos32-gcc -v
          /home/autobuild/tools/win32/bin/kos32-g++ -v
          /kolibrios-toolchain/win32/bin/kos32-gcc -v
          /kolibrios-toolchain/win32/bin/kos32-g++ -v

      - name: Remove package
        run: sudo apt remove kos32-gcc

  #Test chocolatey package build
  chocolatey-package-build:
    name: Chocolatey build package test
    runs-on: windows-latest
    needs: PowerShell-install
    steps:
      - uses: actions/checkout@v4

      - name: Build
        run: |
          cmake -B ${{ github.workspace }}/build
          cmake --build ${{ github.workspace }}/build --target choco

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: choco-package
          # Upload entire repository
          path: './build/choco-package.nupkg'

  # Test chocolatey package install/remove
  chocolatey-package-test:
    name: chocolatey install test
    runs-on: windows-latest
    needs: chocolatey-package-build
    steps:
      - uses: actions/checkout@v4
      
      - name: Install modules
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name 7Zip4PowerShell

      - name: Build
        run: |
          cmake -B ${{ github.workspace }}/build
          cmake --build ${{ github.workspace }}/build --target choco

      - name: Install package
        run: choco install ${{ github.workspace }}\build\choco-package.nupkg
        
      - name: Test
        run: |
          kos32-gcc -v
          kos32-g++ -v

      - name: Remove package
        run: choco uninstall kos32-gcc

